/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

Properties defaultProperties = new Properties();

ext {
    localPropertiesFile = project.rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localProperties = new Properties(defaultProperties)
        localProperties.load(localPropertiesFile.newDataInputStream())

        ext."signing.keyId" = localProperties.getProperty('signing.keyId')
        ext."signing.secretKeyRingFile" = localProperties.getProperty('signing.secretKeyRingFile')
        ext."signing.password" = localProperties.getProperty('signing.password')

        nexusUsername = localProperties.getProperty('nexusUsername')
        nexusPassword = localProperties.getProperty('nexusPassword')

        pomGroupId = 'org.onepf'
        pomUrl = 'http://www.onepf.org/openiab'
        pomLicenseName = 'The Apache Software License, Version 2.0'
        pomLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        pomLicenseDist = 'repo'
        pomDeveloperName = 'One Platform Foundation'
        pomDeveloperId = 'onepf'
        pomPackaging = 'aar'
    }
}

def isReleaseBuild() {
    return project.android.defaultConfig.versionName.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getPomPackaging() {
    return hasProperty('POM_PACKAGING') ? POM_PACKAGING : 'aar'
}

def hasNexusCredentials() {
    if (!project.localPropertiesFile.exists()) {
        return false
    }
    return project.nexusUsername != null && project.nexusPassword != null
}

if (hasNexusCredentials()) {
    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.version = project.android.defaultConfig.versionName
                    pom.groupId = project.pomGroupId
                    pom.artifactId = POM_ARTIFACT_ID

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: project.nexusUsername, password: project.nexusPassword)
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: project.nexusUsername, password: project.nexusPassword)
                    }

                    pom.project {
                        packaging project.pomPackaging
                        url project.pomUrl
                        name POM_NAME
                        description POM_DESCRIPTION

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name project.pomLicenseName
                                url project.pomLicenseUrl
                                distribution project.pomLicenseDist
                            }
                        }

                        repositories {
                            repository {
                                id 'onepf-repo'
                                name 'OnePF Repository'
                                url 'https://raw.githubusercontent.com/onepf/OPF-mvn-repo/master/'
                            }
                        }

                        developers {
                            developer {
                                id project.pomDeveloperId
                                name project.pomDeveloperName
                            }
                        }
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.sourceFiles
        }

        task androidJavadocsJar(type: Jar) {
            classifier = 'javadoc'
            //basename = artifact_id
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives packageReleaseJar
            archives androidSourcesJar
            archives androidJavadocsJar
        }
    }
}
